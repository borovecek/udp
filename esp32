#include <WiFi.h>
#include <WiFiUdp.h>

// ⚙️ WiFi připojení
const char* ssid = "miminko";
const char* password = "KoPaCkOpEdIrU";

// --- IP a port centrály ---
IPAddress z21_ip(192, 168, 2, 128);
const uint16_t z21_port = 21105;

// --- UDP komunikace ---
WiFiUDP udp;

void sendLocoFunction(uint16_t address, uint8_t functionIndex, uint8_t action) {
  uint8_t adr_msb = (address >> 8) & 0x3F;
  if (address >= 128) {
    adr_msb |= 0xC0;
  }
  uint8_t adr_lsb = address & 0xFF;

  uint8_t db0 = ((action & 0x03) << 6) | (functionIndex & 0x3F);

  uint8_t packet[10];
  packet[0] = 0x0A; // délka paketu
  packet[1] = 0x00;
  packet[2] = 0x40;
  packet[3] = 0x00;
  packet[4] = 0xE4; // LAN_X_SET_LOCO_FUNCTION
  packet[5] = db0;
  packet[6] = adr_msb;
  packet[7] = adr_lsb;

  // XOR byte přes bity 1..7
  uint8_t xorByte = 0;
  for (int i = 1; i <= 7; i++) {
    xorByte ^= packet[i];
  }
  packet[8] = xorByte;

  // poslední byte je XOR, celkem 9 bytů, ale dle dokumentace je délka 0x0A (10) - zkusme doplnit 0 na konec
  packet[9] = 0x00;

  sendUdpPacket(packet, 10);

  Serial.print("Function command sent: Addr=");
  Serial.print(address);
  Serial.print(", Func=");
  Serial.print(functionIndex);
  Serial.print(", Action=");
  Serial.println(action);
}


void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("ESP32 IP: ");
  Serial.println(WiFi.localIP());

  udp.begin(21105);

  /*  sendDiscovery();
    delay(1000);*/

  sendPowerOn();
  delay(200);

  // Test: pošli příkaz pro lokomotivu (adresa 3, rychlost 100, vpřed, 128 kroků)
    sendLocoDrive(3, 1, false, 3);
  sendLocoDrive(7, 0, false, 3);
  sendLocoDrive(11, 0, true, 3);
}

void loop() {
  checkUdpResponse();
  delay(100);
  sendLocoFunction(3, 0, 1); // adresa 3, funkce 0=F0, akce 1=zapnout
  delay(1000);
  sendLocoFunction(3, 0, 0); // adresa 3, funkce 0=F0, akce 0=vypnout
  delay(1000);
}

void sendDiscovery() {
  sendUdpPacket({0x07, 0x00, 0x40, 0x00, 0x21, 0x21, 0x00}); delay(50); // LAN_XVER
  sendUdpPacket({0x07, 0x00, 0x40, 0x00, 0xF1, 0x0A, 0xFB}); delay(50); // LAN_GET_FW_VERSION
  sendUdpPacket({0x04, 0x00, 0x10, 0x00}); delay(50); // LAN_GET_SERIAL_NUMBER
  sendUdpPacket({0x07, 0x00, 0x40, 0x00, 0x21, 0x24, 0x05}); // SystemStateGet
  delay(50);

}

void sendPowerOn() {
  sendUdpPacket({0x07, 0x00, 0x40, 0x00, 0x21, 0x81, 0xa0});
  Serial.println("Sent Power ON");
}

void sendLocoDrive(uint16_t address, uint8_t speed, bool forward, uint8_t speedSteps) {
  uint8_t adr_msb = (address >> 8) & 0x3F;
  if (address >= 128) {
    adr_msb |= 0xC0; // Horní 2 bity nastavit na 1 pro adresy >=128
  }
  uint8_t adr_lsb = address & 0xFF;

  // DB0: 0x10 + počet speed steps (S)
  uint8_t db0 = 0x10 | (speedSteps & 0x0F);

  // DB3: bit7 = směr (1=vpřed), bity0-6 = rychlost
  uint8_t db3 = speed & 0x7F;
  if (forward) db3 |= 0x80;

  uint8_t packet[10];
  packet[0] = 0x0A;    // délka paketu
  packet[1] = 0x00;    // header1
  packet[2] = 0x40;    // header2
  packet[3] = 0x00;    // header3
  packet[4] = 0xE4;    // typ zprávy - LAN_X_SET_LOCO_DRIVE
  packet[5] = db0;     // počet rychlostních kroků
  packet[6] = adr_msb; // adresa MSB
  packet[7] = adr_lsb; // adresa LSB
  packet[8] = db3;     // rychlost + směr

  // Výpočet XOR pro bajty 1..8
  uint8_t xorByte = 0;
  for (int i = 1; i <= 8; i++) {
    xorByte ^= packet[i];
  }
  packet[9] = xorByte;

  sendUdpPacket(packet, sizeof(packet));

  Serial.print("Sent LocoDrive: adr=");
  Serial.print(address);
  Serial.print(", speed=");
  Serial.print(speed);
  Serial.print(", forward=");
  Serial.print(forward);
  Serial.print(", speedSteps=");
  Serial.println(speedSteps);
}

void sendUdpPacket(std::initializer_list<uint8_t> data) {
  udp.beginPacket(z21_ip, z21_port);
  for (auto b : data) udp.write(b);
  udp.endPacket();
  Serial.println("UDP packet sent");
}

void sendUdpPacket(const uint8_t* data, size_t len) {
  udp.beginPacket(z21_ip, z21_port);
  udp.write(data, len);
  udp.endPacket();
  Serial.println("UDP packet sent");
}

void checkUdpResponse() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    uint8_t buffer[64];
    int len = udp.read(buffer, sizeof(buffer));
    Serial.print("Received UDP packet: ");
    for (int i = 0; i < len; i++) {
      Serial.printf("%02X ", buffer[i]);
    }
    Serial.println();
  }
  delay(100);
}
